/* The following code was generated by JFlex 1.4.1 on 8/2/06 6:03 AM */

/*
 * Copyright 2000-2006 Omnicore Software, Hans Kratz & Dennis Strein GbR,
 *                     Geert Bevin <gbevin[remove] at uwyn dot com>,
 *					   Ulf Dittmer (ulf[remove] at ulfdittmer dot com).
 * Distributed under the terms of either:
 * - the common development and distribution license (CDDL), v1.0; or
 * - the GNU Lesser General Public License, v2.1 or later
 * $Id: JavaScriptHighlighter.java 3431 2006-08-02 04:09:28Z gbevin $
 */
package org.codelibs.jhighlight.highlighter;

import java.io.IOException;
import java.io.Reader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 8/2/06 6:03 AM from the specification file
 * <tt>com/uwyn/jhighlight/highlighter/JavaScriptHighlighter.flex</tt>
 */
public class JavaScriptHighlighter implements ExplicitStateHighlighter {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 128;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\0\1\34\1\0\1\0\1\0\16\4\4\0\1\0\1\40"+
    "\1\33\1\0\1\2\1\40\1\40\1\36\1\37\1\37\1\41\1\10"+
    "\1\37\1\10\1\5\1\42\1\1\11\1\1\40\1\37\1\40\1\40"+
    "\1\40\1\40\1\0\4\3\1\7\25\3\1\37\1\35\1\37\1\40"+
    "\1\3\1\0\1\13\1\11\1\15\1\24\1\6\1\26\1\30\1\31"+
    "\1\22\1\2\1\14\1\25\1\2\1\20\1\17\2\2\1\12\1\16"+
    "\1\21\1\23\1\32\1\27\3\2\1\37\1\40\1\37\1\40\41\4"+
    "\2\0\4\2\4\0\1\2\2\0\1\4\7\0\1\2\4\0\1\2"+
    "\5\0\27\2\1\0\37\2\1\0\u013f\2\31\0\162\2\4\0\14\2"+
    "\16\0\5\2\11\0\1\2\21\0\130\4\5\0\23\4\12\0\1\2"+
    "\13\0\1\2\1\0\3\2\1\0\1\2\1\0\24\2\1\0\54\2"+
    "\1\0\46\2\1\0\5\2\4\0\202\2\1\0\4\4\3\0\105\2"+
    "\1\0\46\2\2\0\2\2\6\0\20\2\41\0\46\2\2\0\1\2"+
    "\7\0\47\2\11\0\21\4\1\0\27\4\1\0\3\4\1\0\1\4"+
    "\1\0\2\4\1\0\1\4\13\0\33\2\5\0\3\2\15\0\4\4"+
    "\14\0\6\4\13\0\32\2\5\0\13\2\16\4\7\0\12\4\4\0"+
    "\2\2\1\4\143\2\1\0\1\2\10\4\1\0\6\4\2\2\2\4"+
    "\1\0\4\4\2\2\12\4\3\2\2\0\1\2\17\0\1\4\1\2"+
    "\1\4\36\2\33\4\2\0\3\2\60\0\46\2\13\4\1\2\u014f\0"+
    "\3\4\66\2\2\0\1\4\1\2\20\4\2\0\1\2\4\4\3\0"+
    "\12\2\2\4\2\0\12\4\21\0\3\4\1\0\10\2\2\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2\2\0\1\4"+
    "\1\2\7\4\2\0\2\4\2\0\3\4\11\0\1\4\4\0\2\2"+
    "\1\0\3\2\2\4\2\0\12\4\4\2\15\0\3\4\1\0\6\2"+
    "\4\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0\2\2"+
    "\1\0\2\2\2\0\1\4\1\0\5\4\4\0\2\4\2\0\3\4"+
    "\13\0\4\2\1\0\1\2\7\0\14\4\3\2\14\0\3\4\1\0"+
    "\11\2\1\0\3\2\1\0\26\2\1\0\7\2\1\0\2\2\1\0"+
    "\5\2\2\0\1\4\1\2\10\4\1\0\3\4\1\0\3\4\2\0"+
    "\1\2\17\0\2\2\2\4\2\0\12\4\1\0\1\2\17\0\3\4"+
    "\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2"+
    "\1\0\5\2\2\0\1\4\1\2\6\4\3\0\2\4\2\0\3\4"+
    "\10\0\2\4\4\0\2\2\1\0\3\2\4\0\12\4\1\0\1\2"+
    "\20\0\1\4\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0"+
    "\2\2\1\0\1\2\1\0\2\2\3\0\2\2\3\0\3\2\3\0"+
    "\10\2\1\0\3\2\4\0\5\4\3\0\3\4\1\0\4\4\11\0"+
    "\1\4\17\0\11\4\11\0\1\2\7\0\3\4\1\0\10\2\1\0"+
    "\3\2\1\0\27\2\1\0\12\2\1\0\5\2\4\0\7\4\1\0"+
    "\3\4\1\0\4\4\7\0\2\4\11\0\2\2\4\0\12\4\22\0"+
    "\2\4\1\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0"+
    "\5\2\2\0\1\4\1\2\7\4\1\0\3\4\1\0\4\4\7\0"+
    "\2\4\7\0\1\2\1\0\2\2\4\0\12\4\22\0\2\4\1\0"+
    "\10\2\1\0\3\2\1\0\27\2\1\0\20\2\4\0\6\4\2\0"+
    "\3\4\1\0\4\4\11\0\1\4\10\0\2\2\4\0\12\4\22\0"+
    "\2\4\1\0\22\2\3\0\30\2\1\0\11\2\1\0\1\2\2\0"+
    "\7\2\3\0\1\4\4\0\6\4\1\0\1\4\1\0\10\4\22\0"+
    "\2\4\15\0\60\2\1\4\2\2\7\4\4\0\10\2\10\4\1\0"+
    "\12\4\47\0\2\2\1\0\1\2\2\0\2\2\1\0\1\2\2\0"+
    "\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0"+
    "\1\2\2\0\2\2\1\0\4\2\1\4\2\2\6\4\1\0\2\4"+
    "\1\2\2\0\5\2\1\0\1\2\1\0\6\4\2\0\12\4\2\0"+
    "\2\2\42\0\1\2\27\0\2\4\6\0\12\4\13\0\1\4\1\0"+
    "\1\4\1\0\1\4\4\0\2\4\10\2\1\0\42\2\6\0\24\4"+
    "\1\0\2\4\4\2\4\0\10\4\1\0\44\4\11\0\1\4\71\0"+
    "\42\2\1\0\5\2\1\0\2\2\1\0\7\4\3\0\4\4\6\0"+
    "\12\4\6\0\6\2\4\4\106\0\46\2\12\0\51\2\7\0\132\2"+
    "\5\0\104\2\5\0\122\2\6\0\7\2\1\0\77\2\1\0\1\2"+
    "\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\47\2"+
    "\1\0\1\2\1\0\4\2\2\0\37\2\1\0\1\2\1\0\4\2"+
    "\2\0\7\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\7\2"+
    "\1\0\27\2\1\0\37\2\1\0\1\2\1\0\4\2\2\0\7\2"+
    "\1\0\47\2\1\0\23\2\16\0\11\4\56\0\125\2\14\0\u026c\2"+
    "\2\0\10\2\12\0\32\2\5\0\113\2\3\0\3\2\17\0\15\2"+
    "\1\0\4\2\3\4\13\0\22\2\3\4\13\0\22\2\2\4\14\0"+
    "\15\2\1\0\3\2\1\0\2\4\14\0\64\2\40\4\3\0\1\2"+
    "\3\0\2\2\1\4\2\0\12\4\41\0\3\4\2\0\12\4\6\0"+
    "\130\2\10\0\51\2\1\4\126\0\35\2\3\0\14\4\4\0\14\4"+
    "\12\0\12\4\36\2\2\0\5\2\u038b\0\154\2\224\0\234\2\4\0"+
    "\132\2\6\0\26\2\2\0\6\2\2\0\46\2\2\0\6\2\2\0"+
    "\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\37\2\2\0"+
    "\65\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0"+
    "\4\2\2\0\6\2\4\0\15\2\5\0\3\2\1\0\7\2\17\0"+
    "\4\4\32\0\5\4\20\0\2\2\23\0\1\2\13\0\4\4\6\0"+
    "\6\4\1\0\1\2\15\0\1\2\40\0\22\2\36\0\15\4\4\0"+
    "\1\4\3\0\6\4\27\0\1\2\4\0\1\2\2\0\12\2\1\0"+
    "\1\2\3\0\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\4\2\1\0\3\2\1\0\7\2\3\0\3\2\5\0\5\2\26\0"+
    "\44\2\u0e81\0\3\2\31\0\11\2\6\4\1\0\5\2\2\0\5\2"+
    "\4\0\126\2\2\0\2\4\2\0\3\2\1\0\137\2\5\0\50\2"+
    "\4\0\136\2\21\0\30\2\70\0\20\2\u0200\0\u19b6\2\112\0\u51a6\2"+
    "\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2\2\0\73\2\225\0\7\2"+
    "\14\0\5\2\5\0\1\2\1\4\12\2\1\0\15\2\1\0\5\2"+
    "\1\0\1\2\1\0\2\2\1\0\2\2\1\0\154\2\41\0\u016b\2"+
    "\22\0\100\2\2\0\66\2\50\0\15\2\3\0\20\4\20\0\4\4"+
    "\17\0\2\2\30\0\3\2\31\0\1\2\6\0\5\2\1\0\207\2"+
    "\2\0\1\4\4\0\1\2\13\0\12\4\7\0\32\2\4\0\1\2"+
    "\1\0\32\2\12\0\132\2\3\0\6\2\2\0\6\2\2\0\6\2"+
    "\2\0\3\2\3\0\2\2\3\0\2\2\22\0\3\4\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\1\1\4\16\1"+
    "\1\3\1\4\1\1\1\5\2\1\1\2\1\0\12\1"+
    "\1\6\7\1\1\0\1\2\3\0\1\7\3\0\1\10"+
    "\1\2\1\0\1\2\16\1\1\0\5\1\1\2\10\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\106"+
    "\0\365\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea"+
    "\0\u020d\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\106\0\u02df"+
    "\0\u0302\0\106\0\u0325\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4"+
    "\0\u03f7\0\u041a\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec"+
    "\0\214\0\u050f\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1"+
    "\0\u0299\0\106\0\u0604\0\u02bc\0\u0627\0\u064a\0\u066d\0\u0302"+
    "\0\u0325\0\106\0\u0690\0\u0690\0\u06b3\0\u06d6\0\u06f9\0\u071c"+
    "\0\u073f\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u07ee\0\u0811\0\u0834"+
    "\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3\0\u0906\0\u0929\0\u094c"+
    "\0\u096f\0\214\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0a1e\0\u0a41"+
    "\0\u0a64\0\u0a87";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\3\1\6\1\7\1\5\1\10"+
    "\1\11\1\12\2\5\1\13\1\14\1\5\1\15\1\16"+
    "\1\17\1\5\1\20\1\5\1\21\1\22\1\23\1\5"+
    "\1\24\1\25\2\3\1\26\1\27\2\10\1\30\34\31"+
    "\1\32\4\31\1\33\1\31\44\0\1\4\1\0\1\34"+
    "\1\0\1\35\1\36\1\37\34\0\4\5\1\0\2\5"+
    "\1\0\22\5\11\0\1\35\42\0\4\5\1\0\2\5"+
    "\1\0\14\5\1\40\5\5\11\0\4\5\1\0\2\5"+
    "\1\0\1\5\1\41\20\5\11\0\4\5\1\0\1\42"+
    "\1\5\1\0\22\5\11\0\4\5\1\0\2\5\1\0"+
    "\2\5\1\40\3\5\1\43\13\5\11\0\4\5\1\0"+
    "\2\5\1\0\16\5\1\44\3\5\11\0\4\5\1\0"+
    "\1\45\1\5\1\0\12\5\1\46\7\5\11\0\4\5"+
    "\1\0\2\5\1\0\1\5\1\47\16\5\1\50\1\5"+
    "\11\0\4\5\1\0\2\5\1\0\7\5\1\51\5\5"+
    "\1\51\4\5\11\0\4\5\1\0\1\52\1\5\1\0"+
    "\6\5\1\51\13\5\11\0\4\5\1\0\2\5\1\0"+
    "\2\5\1\53\3\5\1\54\3\5\1\55\7\5\11\0"+
    "\4\5\1\0\2\5\1\0\11\5\1\56\6\5\1\57"+
    "\1\5\11\0\4\5\1\0\2\5\1\0\6\5\1\60"+
    "\13\5\11\0\4\5\1\0\2\5\1\0\2\5\1\54"+
    "\17\5\10\0\33\61\2\62\1\63\5\61\34\64\1\62"+
    "\1\65\1\62\4\64\41\0\1\66\1\67\34\70\1\32"+
    "\4\70\1\71\35\70\1\32\4\70\1\71\1\72\1\0"+
    "\1\34\1\0\1\34\3\0\1\34\34\0\1\35\4\0"+
    "\2\36\34\0\1\73\6\0\1\74\33\0\1\75\1\0"+
    "\1\34\3\0\1\34\1\74\33\0\4\5\1\0\2\5"+
    "\1\0\5\5\1\76\14\5\11\0\4\5\1\0\1\77"+
    "\1\5\1\0\22\5\11\0\4\5\1\0\2\5\1\0"+
    "\10\5\1\100\11\5\11\0\4\5\1\0\2\5\1\0"+
    "\7\5\1\101\12\5\11\0\4\5\1\0\2\5\1\0"+
    "\11\5\1\102\10\5\11\0\4\5\1\0\2\5\1\0"+
    "\16\5\1\51\3\5\11\0\4\5\1\0\2\5\1\0"+
    "\14\5\1\103\5\5\11\0\4\5\1\0\2\5\1\0"+
    "\12\5\1\104\7\5\11\0\4\5\1\0\2\5\1\0"+
    "\11\5\1\105\10\5\11\0\4\5\1\0\2\5\1\0"+
    "\15\5\1\106\4\5\11\0\4\5\1\0\2\5\1\0"+
    "\14\5\1\107\5\5\11\0\4\5\1\0\2\5\1\0"+
    "\1\5\1\51\20\5\11\0\4\5\1\0\2\5\1\0"+
    "\7\5\1\110\12\5\11\0\4\5\1\0\2\5\1\0"+
    "\10\5\1\111\11\5\11\0\4\5\1\0\2\5\1\0"+
    "\11\5\1\112\10\5\11\0\4\5\1\0\2\5\1\0"+
    "\10\5\1\113\11\5\10\0\34\61\1\62\6\61\34\64"+
    "\1\62\6\64\41\0\1\114\1\0\34\67\1\32\6\67"+
    "\1\0\1\73\42\0\1\75\1\0\1\34\3\0\1\34"+
    "\34\0\4\5\1\0\1\51\1\5\1\0\22\5\11\0"+
    "\4\5\1\0\2\5\1\0\2\5\1\115\17\5\11\0"+
    "\4\5\1\0\2\5\1\0\12\5\1\116\7\5\11\0"+
    "\4\5\1\0\2\5\1\0\5\5\1\117\2\5\1\120"+
    "\11\5\11\0\4\5\1\0\2\5\1\0\10\5\1\121"+
    "\11\5\11\0\4\5\1\0\2\5\1\0\14\5\1\122"+
    "\5\5\11\0\4\5\1\0\1\122\1\5\1\0\22\5"+
    "\11\0\4\5\1\0\2\5\1\0\5\5\1\51\14\5"+
    "\11\0\4\5\1\0\2\5\1\0\2\5\1\123\17\5"+
    "\11\0\4\5\1\0\2\5\1\0\5\5\1\104\14\5"+
    "\11\0\4\5\1\0\2\5\1\0\4\5\1\124\15\5"+
    "\11\0\4\5\1\0\2\5\1\0\20\5\1\51\1\5"+
    "\11\0\4\5\1\0\2\5\1\0\14\5\1\76\5\5"+
    "\11\0\4\5\1\0\2\5\1\0\6\5\1\51\13\5"+
    "\52\0\1\32\1\0\4\5\1\0\2\5\1\0\3\5"+
    "\1\51\16\5\11\0\4\5\1\0\2\5\1\0\1\5"+
    "\1\125\20\5\11\0\4\5\1\0\2\5\1\0\10\5"+
    "\1\51\11\5\11\0\4\5\1\0\2\5\1\0\11\5"+
    "\1\126\10\5\11\0\4\5\1\0\2\5\1\0\4\5"+
    "\1\111\15\5\11\0\4\5\1\0\2\5\1\0\12\5"+
    "\1\127\7\5\11\0\4\5\1\0\2\5\1\0\10\5"+
    "\1\130\11\5\11\0\4\5\1\0\2\5\1\0\7\5"+
    "\1\51\12\5\11\0\4\5\1\0\2\5\1\0\7\5"+
    "\1\131\12\5\11\0\4\5\1\0\2\5\1\0\14\5"+
    "\1\117\5\5\11\0\4\5\1\0\2\5\1\0\11\5"+
    "\1\132\10\5\11\0\4\5\1\0\2\5\1\0\12\5"+
    "\1\76\7\5\11\0\4\5\1\0\2\5\1\0\6\5"+
    "\1\125\13\5\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2730];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\16\1\1\11\2\1\1\11"+
    "\3\1\1\0\22\1\1\0\1\11\3\0\1\1\3\0"+
    "\1\11\1\1\1\0\17\1\1\0\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	/* styles */
	
	public static final byte PLAIN_STYLE = 1;
	public static final byte KEYWORD_STYLE = 2;
	public static final byte OPERATOR_STYLE = 3;
	public static final byte SEPARATOR_STYLE = 4;
	public static final byte LITERAL_STYLE = 5;
	public static final byte JAVA_COMMENT_STYLE = 6;
	
	/* Highlighter implementation */
	
	public int getStyleCount()
	{
		return 6;
	}
	
	public byte getStartState()
	{
		return YYINITIAL+1;
	}
	
	public byte getCurrentState()
	{
		return (byte) (yystate()+1);
	}
	
	public void setState(byte newState)
	{
		yybegin(newState-1);
	}
	
	public byte getNextToken()
	throws IOException
	{
		return (byte) yylex();
	}
	
	public int getTokenLength()
	{
		return yylength();
	}
	
	public void setReader(Reader r)
	{
		this.zzReader = r;
	}

	public JavaScriptHighlighter()
	{
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScriptHighlighter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaScriptHighlighter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1758) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return PLAIN_STYLE;
          }
        case 9: break;
        case 8: 
          { yybegin(YYINITIAL); return JAVA_COMMENT_STYLE;
          }
        case 10: break;
        case 4: 
          { return OPERATOR_STYLE;
          }
        case 11: break;
        case 5: 
          { return JAVA_COMMENT_STYLE;
          }
        case 12: break;
        case 3: 
          { return SEPARATOR_STYLE;
          }
        case 13: break;
        case 7: 
          { yybegin(IN_COMMENT);  return JAVA_COMMENT_STYLE;
          }
        case 14: break;
        case 6: 
          { return KEYWORD_STYLE;
          }
        case 15: break;
        case 2: 
          { return LITERAL_STYLE;
          }
        case 16: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
