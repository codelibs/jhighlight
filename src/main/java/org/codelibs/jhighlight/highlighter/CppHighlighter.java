/* The following code was generated by JFlex 1.4.1 on 8/2/06 6:03 AM */

/*
 * Copyright 2006 Arnout Engelen <arnouten[remove] at bzzt dot net>.
 * Copyright 2000-2006 Omnicore Software, Hans Kratz & Dennis Strein GbR,
 *                     Geert Bevin <gbevin[remove] at uwyn dot com>.
 * Distributed under the terms of either:
 * - the common development and distribution license (CDDL), v1.0; or
 * - the GNU Lesser General Public License, v2.1 or later
 * $Id: CppHighlighter.java 3431 2006-08-02 04:09:28Z gbevin $
 */
package org.codelibs.jhighlight.highlighter;

import java.io.IOException;
import java.io.Reader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 8/2/06 6:03 AM from the specification file
 * <tt>com/uwyn/jhighlight/highlighter/CppHighlighter.flex</tt>
 */
public class CppHighlighter implements ExplicitStateHighlighter {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 128;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_DOXYGEN_COMMENT = 2;
  public static final int IN_COMMENT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\0\1\61\1\0\1\0\1\0\16\4\4\0\1\0\1\65"+
    "\1\60\1\1\1\2\1\65\1\65\1\63\1\64\1\64\1\66\1\27"+
    "\1\57\1\27\1\24\1\67\1\7\1\51\1\54\1\53\1\55\1\14"+
    "\1\52\1\14\1\50\1\5\1\65\1\64\1\65\1\65\1\65\1\65"+
    "\1\70\3\13\1\22\1\26\1\22\5\6\1\20\10\6\1\16\2\6"+
    "\1\11\2\6\1\64\1\62\1\64\1\65\1\3\1\0\1\30\1\31"+
    "\1\12\1\23\1\25\1\21\1\36\1\44\1\35\1\2\1\43\1\17"+
    "\1\42\1\37\1\40\1\45\1\2\1\34\1\32\1\33\1\15\1\46"+
    "\1\47\1\10\1\41\1\56\1\64\1\65\1\64\1\65\41\4\2\0"+
    "\4\2\4\0\1\2\2\0\1\4\7\0\1\2\4\0\1\2\5\0"+
    "\27\2\1\0\37\2\1\0\u013f\2\31\0\162\2\4\0\14\2\16\0"+
    "\5\2\11\0\1\2\21\0\130\4\5\0\23\4\12\0\1\2\13\0"+
    "\1\2\1\0\3\2\1\0\1\2\1\0\24\2\1\0\54\2\1\0"+
    "\46\2\1\0\5\2\4\0\202\2\1\0\4\4\3\0\105\2\1\0"+
    "\46\2\2\0\2\2\6\0\20\2\41\0\46\2\2\0\1\2\7\0"+
    "\47\2\11\0\21\4\1\0\27\4\1\0\3\4\1\0\1\4\1\0"+
    "\2\4\1\0\1\4\13\0\33\2\5\0\3\2\15\0\4\4\14\0"+
    "\6\4\13\0\32\2\5\0\13\2\16\4\7\0\12\4\4\0\2\2"+
    "\1\4\143\2\1\0\1\2\10\4\1\0\6\4\2\2\2\4\1\0"+
    "\4\4\2\2\12\4\3\2\2\0\1\2\17\0\1\4\1\2\1\4"+
    "\36\2\33\4\2\0\3\2\60\0\46\2\13\4\1\2\u014f\0\3\4"+
    "\66\2\2\0\1\4\1\2\20\4\2\0\1\2\4\4\3\0\12\2"+
    "\2\4\2\0\12\4\21\0\3\4\1\0\10\2\2\0\2\2\2\0"+
    "\26\2\1\0\7\2\1\0\1\2\3\0\4\2\2\0\1\4\1\2"+
    "\7\4\2\0\2\4\2\0\3\4\11\0\1\4\4\0\2\2\1\0"+
    "\3\2\2\4\2\0\12\4\4\2\15\0\3\4\1\0\6\2\4\0"+
    "\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0\2\2\1\0"+
    "\2\2\2\0\1\4\1\0\5\4\4\0\2\4\2\0\3\4\13\0"+
    "\4\2\1\0\1\2\7\0\14\4\3\2\14\0\3\4\1\0\11\2"+
    "\1\0\3\2\1\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2"+
    "\2\0\1\4\1\2\10\4\1\0\3\4\1\0\3\4\2\0\1\2"+
    "\17\0\2\2\2\4\2\0\12\4\1\0\1\2\17\0\3\4\1\0"+
    "\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0"+
    "\5\2\2\0\1\4\1\2\6\4\3\0\2\4\2\0\3\4\10\0"+
    "\2\4\4\0\2\2\1\0\3\2\4\0\12\4\1\0\1\2\20\0"+
    "\1\4\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2"+
    "\1\0\1\2\1\0\2\2\3\0\2\2\3\0\3\2\3\0\10\2"+
    "\1\0\3\2\4\0\5\4\3\0\3\4\1\0\4\4\11\0\1\4"+
    "\17\0\11\4\11\0\1\2\7\0\3\4\1\0\10\2\1\0\3\2"+
    "\1\0\27\2\1\0\12\2\1\0\5\2\4\0\7\4\1\0\3\4"+
    "\1\0\4\4\7\0\2\4\11\0\2\2\4\0\12\4\22\0\2\4"+
    "\1\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2"+
    "\2\0\1\4\1\2\7\4\1\0\3\4\1\0\4\4\7\0\2\4"+
    "\7\0\1\2\1\0\2\2\4\0\12\4\22\0\2\4\1\0\10\2"+
    "\1\0\3\2\1\0\27\2\1\0\20\2\4\0\6\4\2\0\3\4"+
    "\1\0\4\4\11\0\1\4\10\0\2\2\4\0\12\4\22\0\2\4"+
    "\1\0\22\2\3\0\30\2\1\0\11\2\1\0\1\2\2\0\7\2"+
    "\3\0\1\4\4\0\6\4\1\0\1\4\1\0\10\4\22\0\2\4"+
    "\15\0\60\2\1\4\2\2\7\4\4\0\10\2\10\4\1\0\12\4"+
    "\47\0\2\2\1\0\1\2\2\0\2\2\1\0\1\2\2\0\1\2"+
    "\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2"+
    "\2\0\2\2\1\0\4\2\1\4\2\2\6\4\1\0\2\4\1\2"+
    "\2\0\5\2\1\0\1\2\1\0\6\4\2\0\12\4\2\0\2\2"+
    "\42\0\1\2\27\0\2\4\6\0\12\4\13\0\1\4\1\0\1\4"+
    "\1\0\1\4\4\0\2\4\10\2\1\0\42\2\6\0\24\4\1\0"+
    "\2\4\4\2\4\0\10\4\1\0\44\4\11\0\1\4\71\0\42\2"+
    "\1\0\5\2\1\0\2\2\1\0\7\4\3\0\4\4\6\0\12\4"+
    "\6\0\6\2\4\4\106\0\46\2\12\0\51\2\7\0\132\2\5\0"+
    "\104\2\5\0\122\2\6\0\7\2\1\0\77\2\1\0\1\2\1\0"+
    "\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\47\2\1\0"+
    "\1\2\1\0\4\2\2\0\37\2\1\0\1\2\1\0\4\2\2\0"+
    "\7\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\7\2\1\0"+
    "\27\2\1\0\37\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0"+
    "\47\2\1\0\23\2\16\0\11\4\56\0\125\2\14\0\u026c\2\2\0"+
    "\10\2\12\0\32\2\5\0\113\2\3\0\3\2\17\0\15\2\1\0"+
    "\4\2\3\4\13\0\22\2\3\4\13\0\22\2\2\4\14\0\15\2"+
    "\1\0\3\2\1\0\2\4\14\0\64\2\40\4\3\0\1\2\3\0"+
    "\2\2\1\4\2\0\12\4\41\0\3\4\2\0\12\4\6\0\130\2"+
    "\10\0\51\2\1\4\126\0\35\2\3\0\14\4\4\0\14\4\12\0"+
    "\12\4\36\2\2\0\5\2\u038b\0\154\2\224\0\234\2\4\0\132\2"+
    "\6\0\26\2\2\0\6\2\2\0\46\2\2\0\6\2\2\0\10\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\37\2\2\0\65\2"+
    "\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2"+
    "\2\0\6\2\4\0\15\2\5\0\3\2\1\0\7\2\17\0\4\4"+
    "\32\0\5\4\20\0\2\2\23\0\1\2\13\0\4\4\6\0\6\4"+
    "\1\0\1\2\15\0\1\2\40\0\22\2\36\0\15\4\4\0\1\4"+
    "\3\0\6\4\27\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2"+
    "\3\0\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2"+
    "\1\0\3\2\1\0\7\2\3\0\3\2\5\0\5\2\26\0\44\2"+
    "\u0e81\0\3\2\31\0\11\2\6\4\1\0\5\2\2\0\5\2\4\0"+
    "\126\2\2\0\2\4\2\0\3\2\1\0\137\2\5\0\50\2\4\0"+
    "\136\2\21\0\30\2\70\0\20\2\u0200\0\u19b6\2\112\0\u51a6\2\132\0"+
    "\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2\2\0\73\2\225\0\7\2\14\0"+
    "\5\2\5\0\1\2\1\4\12\2\1\0\15\2\1\0\5\2\1\0"+
    "\1\2\1\0\2\2\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0"+
    "\100\2\2\0\66\2\50\0\15\2\3\0\20\4\20\0\4\4\17\0"+
    "\2\2\30\0\3\2\31\0\1\2\6\0\5\2\1\0\207\2\2\0"+
    "\1\4\4\0\1\2\13\0\12\4\7\0\32\2\4\0\1\2\1\0"+
    "\32\2\12\0\132\2\3\0\6\2\2\0\6\2\2\0\6\2\2\0"+
    "\3\2\3\0\2\2\3\0\2\2\22\0\3\4\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\4\1\1\2\1\1\1\2\5\1\1\3\1\1"+
    "\1\4\15\1\1\3\2\1\1\4\1\1\1\5\1\1"+
    "\3\6\1\1\6\0\2\1\7\2\1\0\1\1\1\7"+
    "\4\2\20\1\1\10\24\1\1\10\20\1\4\0\1\11"+
    "\3\0\1\12\1\13\1\14\7\0\1\15\3\0\23\1"+
    "\1\2\1\0\1\2\55\1\1\7\23\1\1\16\11\0"+
    "\41\1\1\7\54\1\1\0\1\15\4\0\16\1\1\10"+
    "\44\1\3\0\20\1\1\10\2\1\1\10\56\1\1\10"+
    "\10\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\253\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\253"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\253\0\u0792\0\253\0\u07cb"+
    "\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\253\0\u083d"+
    "\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1"+
    "\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u011d\0\u1527\0\u1560"+
    "\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728"+
    "\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u06ae\0\u18b7"+
    "\0\u06e7\0\u18f0\0\u1929\0\u1962\0\u0759\0\u0792\0\253\0\253"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2"+
    "\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba"+
    "\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082"+
    "\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a"+
    "\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412"+
    "\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da"+
    "\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2"+
    "\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a"+
    "\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32"+
    "\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa"+
    "\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2"+
    "\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a"+
    "\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252"+
    "\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1\0\u341a"+
    "\0\u3453\0\u348c\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2"+
    "\0\u361b\0\u3654\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u37aa"+
    "\0\u37e3\0\u381c\0\u3855\0\u388e\0\u38c7\0\u3900\0\u011d\0\u3939"+
    "\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01"+
    "\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9"+
    "\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6\0\u3e1f\0\u3e58\0\u3e91"+
    "\0\u3eca\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\u4059"+
    "\0\u4092\0\u40cb\0\u4104\0\u413d\0\u4176\0\u41af\0\u41e8\0\u4221"+
    "\0\u425a\0\u4293\0\u42cc\0\u4305\0\253\0\u433e\0\u4377\0\u43b0"+
    "\0\u43e9\0\u4422\0\u445b\0\u4494\0\u44cd\0\u4506\0\u453f\0\u4578"+
    "\0\u45b1\0\u45ea\0\u4623\0\u465c\0\u4695\0\u46ce\0\u4707\0\u4740"+
    "\0\u4779\0\u47b2\0\u47eb\0\u4824\0\u485d\0\u4896\0\u48cf\0\u4908"+
    "\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\u4a5e\0\u4a97\0\u4ad0"+
    "\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4\0\u4bed\0\u4c26\0\u4c5f\0\u4c98"+
    "\0\u4cd1\0\u4d0a\0\u4d43\0\u4d7c\0\u4db5\0\u4dee\0\u4e27\0\u4e60"+
    "\0\u4e99\0\u4ed2\0\u4f0b\0\u4f44\0\u4f7d\0\u4fb6\0\u4fef\0\u5028"+
    "\0\u5061\0\u509a\0\u50d3\0\u510c\0\u5145\0\u517e\0\u51b7\0\u51f0"+
    "\0\u5229\0\u5262\0\u529b\0\u52d4\0\u530d\0\u5346\0\u537f\0\u53b8"+
    "\0\u53f1\0\u542a\0\u5463\0\u549c\0\u54d5\0\u550e\0\u5547\0\u5580"+
    "\0\u55b9\0\u55f2\0\u562b\0\u5664\0\u569d\0\u56d6\0\u570f\0\u5748"+
    "\0\u5781\0\u57ba\0\u57f3\0\u582c\0\u5865\0\u589e\0\u58d7\0\u5910"+
    "\0\u5949\0\u5982\0\u59bb\0\u59f4\0\u4740\0\u5a2d\0\u5a66\0\u5a9f"+
    "\0\u5ad8\0\u5b11\0\u5b4a\0\u5b83\0\u5bbc\0\u5bf5\0\u5c2e\0\u5c67"+
    "\0\u5ca0\0\u5cd9\0\u5d12\0\u5d4b\0\u5d84\0\u5dbd\0\u5df6\0\u5e2f"+
    "\0\u5e68\0\253\0\u5ea1\0\u5eda\0\u5f13\0\u5f4c\0\u5f85\0\u5fbe"+
    "\0\u5ff7\0\u6030";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\4\1\10\1\11\1\12"+
    "\1\6\1\11\1\13\1\11\1\10\1\14\1\11\1\15"+
    "\1\11\1\16\1\11\1\17\1\20\1\21\1\11\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\6\1\34\2\6\1\35\1\36\1\37\6\10"+
    "\1\6\1\40\1\41\2\4\1\42\1\40\2\22\1\43"+
    "\1\4\61\44\1\45\4\44\1\46\2\44\66\47\1\50"+
    "\1\47\1\51\72\0\1\52\1\0\1\52\1\0\3\52"+
    "\1\0\1\52\1\0\2\52\1\53\1\52\1\54\1\52"+
    "\1\0\1\52\1\55\1\0\1\56\1\52\6\0\1\57"+
    "\7\0\1\60\2\0\6\52\15\0\22\6\1\0\2\6"+
    "\1\0\27\6\13\0\1\52\1\6\1\61\1\6\3\62"+
    "\1\6\1\62\1\6\2\62\1\6\1\62\1\6\1\62"+
    "\1\6\1\62\1\6\1\0\1\6\1\62\1\0\20\6"+
    "\6\62\1\6\13\0\1\52\1\0\1\52\1\0\1\10"+
    "\1\52\1\10\1\0\1\52\1\0\1\52\1\10\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\67\1\71\1\72"+
    "\1\73\21\0\6\10\14\0\1\52\1\74\1\11\1\74"+
    "\3\11\1\74\1\11\1\74\2\11\1\74\1\11\1\74"+
    "\1\11\1\74\1\11\1\74\1\0\1\74\1\11\1\0"+
    "\20\74\6\11\1\74\13\0\1\52\1\0\1\52\1\0"+
    "\1\75\1\52\1\76\1\77\1\100\1\0\1\52\1\76"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\67\1\71"+
    "\1\72\1\73\21\0\1\75\5\76\15\0\15\6\1\101"+
    "\4\6\1\0\2\6\1\0\1\102\7\6\1\103\3\6"+
    "\1\104\12\6\14\0\13\6\1\105\6\6\1\0\2\6"+
    "\1\0\2\6\1\106\4\6\1\107\17\6\14\0\22\6"+
    "\1\0\2\6\1\0\5\6\1\110\2\6\1\111\16\6"+
    "\14\0\15\6\1\112\4\6\1\0\2\6\1\0\1\113"+
    "\3\6\1\114\1\115\2\6\1\116\16\6\14\0\15\6"+
    "\1\117\4\6\1\0\1\120\1\6\1\0\10\6\1\121"+
    "\1\122\15\6\17\0\1\71\1\0\1\71\4\0\1\71"+
    "\33\0\6\71\15\0\6\6\1\123\6\6\1\124\4\6"+
    "\1\0\2\6\1\0\7\6\1\125\6\6\1\126\10\6"+
    "\14\0\22\6\1\0\2\6\1\0\1\6\1\127\2\6"+
    "\1\130\22\6\14\0\22\6\1\0\2\6\1\0\4\6"+
    "\1\131\3\6\1\132\16\6\14\0\22\6\1\0\1\133"+
    "\1\6\1\0\1\134\2\6\1\135\1\6\1\136\6\6"+
    "\1\137\2\6\1\140\7\6\14\0\22\6\1\0\1\141"+
    "\1\6\1\0\4\6\1\142\4\6\1\143\2\6\1\144"+
    "\12\6\14\0\22\6\1\0\1\145\1\6\1\0\27\6"+
    "\14\0\17\6\1\146\2\6\1\0\2\6\1\0\7\6"+
    "\1\147\17\6\14\0\10\6\1\150\11\6\1\0\1\151"+
    "\1\6\1\0\10\6\1\152\16\6\14\0\13\6\1\153"+
    "\6\6\1\0\1\154\1\6\1\0\1\155\7\6\1\156"+
    "\16\6\14\0\22\6\1\0\2\6\1\0\15\6\1\157"+
    "\11\6\14\0\13\6\1\160\6\6\1\0\2\6\1\0"+
    "\27\6\14\0\13\6\1\161\6\6\1\0\2\6\1\0"+
    "\4\6\1\162\22\6\14\0\22\6\1\0\2\6\1\0"+
    "\1\163\4\6\1\164\2\6\1\165\16\6\14\0\22\6"+
    "\1\0\2\6\1\0\14\6\1\166\12\6\12\0\60\167"+
    "\2\67\1\170\6\167\61\171\1\67\1\172\1\67\5\171"+
    "\66\0\1\173\1\174\1\0\61\175\1\45\4\175\1\176"+
    "\63\175\1\45\4\175\1\176\1\177\1\175\67\0\1\200"+
    "\3\0\2\201\2\0\1\201\1\0\4\201\1\0\7\201"+
    "\1\0\2\201\1\0\20\201\6\0\1\201\13\0\1\52"+
    "\1\0\1\52\1\0\3\52\1\0\1\52\1\0\2\52"+
    "\1\0\1\52\1\0\1\52\1\0\1\52\3\0\1\52"+
    "\21\0\6\52\45\0\1\202\4\0\1\203\66\0\1\204"+
    "\60\0\1\205\62\0\1\206\14\0\1\207\2\0\1\210"+
    "\52\0\1\211\15\0\1\212\2\0\1\213\62\0\1\214"+
    "\35\0\1\52\1\6\1\62\1\6\3\62\1\6\1\62"+
    "\1\215\2\62\1\216\1\62\1\217\1\62\1\220\1\62"+
    "\1\221\1\0\1\222\1\62\1\0\1\223\1\224\1\225"+
    "\1\226\1\227\1\230\1\231\1\232\2\6\1\233\1\6"+
    "\1\234\1\235\1\236\1\237\6\62\1\6\13\0\1\52"+
    "\1\6\1\62\1\6\3\62\1\6\1\62\1\6\2\62"+
    "\1\6\1\62\1\6\1\62\1\6\1\62\1\6\1\0"+
    "\1\6\1\62\1\0\20\6\6\62\1\6\27\0\2\67"+
    "\2\65\51\0\1\52\1\0\1\52\1\0\3\52\1\0"+
    "\1\52\1\0\2\52\1\67\1\70\1\65\1\66\1\0"+
    "\1\52\3\0\1\52\21\0\6\52\30\0\2\67\53\0"+
    "\1\52\1\0\1\52\1\0\3\52\1\0\1\52\1\0"+
    "\2\52\1\67\1\70\1\0\1\52\1\0\1\52\3\0"+
    "\1\52\21\0\6\52\20\0\1\71\1\0\1\71\4\0"+
    "\1\71\4\0\3\67\1\0\2\72\21\0\6\71\20\0"+
    "\1\240\1\0\1\240\4\0\1\240\12\0\1\241\20\0"+
    "\6\240\14\0\1\52\1\0\1\52\1\0\1\242\1\52"+
    "\1\242\1\0\1\52\1\0\1\52\1\242\1\0\1\52"+
    "\1\0\1\52\1\0\1\52\3\0\1\52\1\241\20\0"+
    "\6\242\15\0\22\74\1\0\2\74\1\0\27\74\13\0"+
    "\1\52\1\0\1\52\1\0\1\75\1\52\1\75\1\0"+
    "\1\52\1\0\1\52\1\75\1\0\1\52\1\0\1\52"+
    "\1\67\1\70\1\67\1\71\1\72\1\73\21\0\6\75"+
    "\14\0\1\52\1\0\1\52\1\0\1\75\1\52\1\76"+
    "\1\0\1\52\1\0\1\52\1\76\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\67\1\71\1\72\1\73\21\0"+
    "\1\75\5\76\20\0\1\77\1\0\1\77\2\0\3\77"+
    "\2\63\2\65\3\77\1\0\2\77\1\0\2\77\16\0"+
    "\6\77\14\0\1\52\1\0\1\52\1\0\1\100\1\52"+
    "\1\100\1\0\1\52\1\77\2\100\1\63\1\64\1\65"+
    "\1\66\1\77\1\100\1\77\1\0\1\77\1\100\1\0"+
    "\2\77\16\0\6\100\15\0\22\6\1\0\2\6\1\0"+
    "\1\243\26\6\14\0\22\6\1\0\2\6\1\0\2\6"+
    "\1\244\1\245\23\6\14\0\22\6\1\0\2\6\1\0"+
    "\7\6\1\246\17\6\14\0\22\6\1\0\2\6\1\0"+
    "\1\247\26\6\14\0\22\6\1\0\2\6\1\0\5\6"+
    "\1\250\21\6\14\0\22\6\1\0\2\6\1\0\5\6"+
    "\1\251\21\6\14\0\22\6\1\0\2\6\1\0\2\6"+
    "\1\252\2\6\1\253\21\6\14\0\22\6\1\0\2\6"+
    "\1\0\3\6\1\254\23\6\14\0\22\6\1\0\2\6"+
    "\1\0\7\6\1\255\17\6\14\0\22\6\1\0\2\6"+
    "\1\0\10\6\1\256\16\6\14\0\15\6\1\124\4\6"+
    "\1\0\2\6\1\0\27\6\14\0\22\6\1\0\2\6"+
    "\1\0\5\6\1\257\21\6\14\0\22\6\1\0\2\6"+
    "\1\0\7\6\1\260\17\6\14\0\22\6\1\0\2\6"+
    "\1\0\4\6\1\146\22\6\14\0\15\6\1\261\4\6"+
    "\1\0\2\6\1\0\27\6\14\0\15\6\1\262\1\6"+
    "\1\263\2\6\1\0\2\6\1\0\15\6\1\264\11\6"+
    "\14\0\13\6\1\265\6\6\1\0\2\6\1\0\27\6"+
    "\14\0\22\6\1\0\2\6\1\0\7\6\1\266\17\6"+
    "\14\0\22\6\1\0\2\6\1\0\3\6\1\267\11\6"+
    "\1\270\11\6\14\0\22\6\1\0\2\6\1\0\2\6"+
    "\1\244\24\6\14\0\13\6\1\271\6\6\1\0\2\6"+
    "\1\0\27\6\14\0\22\6\1\0\1\272\1\6\1\0"+
    "\27\6\14\0\22\6\1\0\2\6\1\0\2\6\1\273"+
    "\24\6\14\0\22\6\1\0\2\6\1\0\4\6\1\274"+
    "\22\6\14\0\22\6\1\0\1\275\1\6\1\0\27\6"+
    "\14\0\22\6\1\0\2\6\1\0\10\6\1\276\16\6"+
    "\14\0\15\6\1\277\4\6\1\0\2\6\1\0\1\300"+
    "\26\6\14\0\17\6\1\301\2\6\1\0\2\6\1\0"+
    "\27\6\14\0\22\6\1\0\2\6\1\0\1\302\3\6"+
    "\1\303\22\6\14\0\22\6\1\0\2\6\1\0\6\6"+
    "\1\304\17\6\1\305\14\0\22\6\1\0\2\6\1\0"+
    "\10\6\1\306\16\6\14\0\22\6\1\0\2\6\1\0"+
    "\5\6\1\307\21\6\14\0\22\6\1\0\2\6\1\0"+
    "\12\6\1\310\14\6\14\0\13\6\1\244\6\6\1\0"+
    "\2\6\1\0\11\6\1\146\15\6\14\0\22\6\1\0"+
    "\2\6\1\0\15\6\1\311\11\6\14\0\22\6\1\0"+
    "\2\6\1\0\4\6\1\312\1\313\21\6\14\0\22\6"+
    "\1\0\2\6\1\0\3\6\1\314\1\6\1\315\1\316"+
    "\20\6\14\0\15\6\1\317\4\6\1\0\2\6\1\0"+
    "\3\6\1\320\1\6\1\321\21\6\14\0\22\6\1\0"+
    "\2\6\1\0\7\6\1\322\17\6\14\0\22\6\1\0"+
    "\2\6\1\0\7\6\1\323\17\6\14\0\22\6\1\0"+
    "\2\6\1\0\3\6\1\324\23\6\14\0\15\6\1\325"+
    "\4\6\1\0\2\6\1\0\27\6\14\0\22\6\1\0"+
    "\2\6\1\0\17\6\1\146\7\6\14\0\22\6\1\0"+
    "\2\6\1\0\12\6\1\326\1\327\13\6\14\0\22\6"+
    "\1\0\2\6\1\0\3\6\1\330\1\331\1\332\10\6"+
    "\1\160\10\6\14\0\22\6\1\0\1\333\1\6\1\0"+
    "\27\6\14\0\22\6\1\0\2\6\1\0\3\6\1\334"+
    "\23\6\14\0\22\6\1\0\2\6\1\0\1\6\1\335"+
    "\25\6\14\0\22\6\1\0\2\6\1\0\5\6\1\336"+
    "\2\6\1\337\16\6\14\0\15\6\1\340\4\6\1\0"+
    "\2\6\1\0\27\6\14\0\22\6\1\0\2\6\1\0"+
    "\4\6\1\341\22\6\14\0\15\6\1\342\4\6\1\0"+
    "\2\6\1\0\5\6\1\250\21\6\14\0\22\6\1\0"+
    "\2\6\1\0\5\6\1\343\21\6\12\0\61\167\1\67"+
    "\7\167\61\171\1\67\7\171\66\0\1\344\2\0\61\174"+
    "\1\45\7\174\2\0\22\201\1\0\2\201\1\0\27\201"+
    "\47\0\1\345\56\0\1\346\104\0\1\347\52\0\1\54"+
    "\101\0\1\347\2\0\1\350\67\0\1\351\57\0\1\352"+
    "\70\0\1\346\13\0\1\203\43\0\1\353\123\0\1\354"+
    "\53\0\1\355\42\0\21\6\1\356\1\0\2\6\1\0"+
    "\27\6\14\0\13\6\1\357\6\6\1\0\2\6\1\0"+
    "\7\6\1\360\17\6\14\0\22\6\1\0\1\361\1\6"+
    "\1\0\27\6\14\0\22\6\1\0\2\6\1\0\1\362"+
    "\4\6\1\115\2\6\1\363\16\6\14\0\22\6\1\0"+
    "\1\364\1\6\1\0\27\6\14\0\6\6\1\365\13\6"+
    "\1\0\2\6\1\0\16\6\1\126\10\6\14\0\15\6"+
    "\1\366\4\6\1\0\2\6\1\0\1\6\1\127\1\367"+
    "\24\6\14\0\22\6\1\0\2\6\1\0\1\370\7\6"+
    "\1\371\16\6\14\0\13\6\1\372\6\6\1\0\1\373"+
    "\1\6\1\0\3\6\1\374\1\6\1\375\21\6\14\0"+
    "\22\6\1\0\2\6\1\0\4\6\1\376\22\6\14\0"+
    "\22\6\1\0\2\6\1\0\1\377\26\6\14\0\17\6"+
    "\1\u0100\1\6\1\u0101\1\0\2\6\1\0\7\6\1\u0102"+
    "\17\6\14\0\10\6\1\146\11\6\1\0\2\6\1\0"+
    "\27\6\14\0\22\6\1\0\2\6\1\0\10\6\1\u0103"+
    "\16\6\14\0\13\6\1\u0104\6\6\1\0\2\6\1\0"+
    "\21\6\1\u0105\1\u0106\4\6\14\0\22\6\1\0\2\6"+
    "\1\0\10\6\1\u0107\16\6\14\0\22\6\1\0\2\6"+
    "\1\0\4\6\1\u0108\1\u0109\21\6\14\0\22\6\1\0"+
    "\2\6\1\0\1\163\4\6\1\u010a\21\6\14\0\10\6"+
    "\1\u010b\11\6\1\0\2\6\1\0\22\6\1\u0106\4\6"+
    "\17\0\1\240\1\0\1\240\4\0\1\240\4\0\3\67"+
    "\24\0\6\240\20\0\1\240\1\0\1\240\4\0\1\240"+
    "\33\0\6\240\14\0\1\52\1\0\1\52\1\0\1\242"+
    "\1\52\1\242\1\0\1\52\1\0\1\52\1\242\1\0"+
    "\1\52\1\0\1\52\1\67\1\70\1\67\2\0\1\52"+
    "\21\0\6\242\15\0\22\6\1\0\2\6\1\0\2\6"+
    "\1\313\24\6\14\0\22\6\1\0\1\146\1\6\1\0"+
    "\27\6\14\0\10\6\1\u010c\11\6\1\0\2\6\1\0"+
    "\27\6\14\0\22\6\1\0\2\6\1\0\2\6\1\u010d"+
    "\1\u010e\23\6\14\0\22\6\1\0\2\6\1\0\4\6"+
    "\1\u010f\22\6\14\0\21\6\1\146\1\0\2\6\1\0"+
    "\27\6\14\0\22\6\1\0\2\6\1\0\7\6\1\u0110"+
    "\17\6\14\0\22\6\1\0\2\6\1\0\5\6\1\u0111"+
    "\21\6\14\0\22\6\1\0\2\6\1\0\10\6\1\u0109"+
    "\16\6\14\0\22\6\1\0\1\u0112\1\6\1\0\27\6"+
    "\14\0\22\6\1\0\2\6\1\0\6\6\1\u010f\20\6"+
    "\14\0\22\6\1\0\2\6\1\0\1\u0113\26\6\14\0"+
    "\22\6\1\0\1\u0114\1\6\1\0\27\6\14\0\22\6"+
    "\1\0\2\6\1\0\1\u0115\26\6\14\0\22\6\1\0"+
    "\1\u0116\1\6\1\0\5\6\1\u0117\21\6\14\0\22\6"+
    "\1\0\1\u0118\1\6\1\0\27\6\14\0\22\6\1\0"+
    "\2\6\1\0\1\u0119\26\6\14\0\22\6\1\0\2\6"+
    "\1\0\4\6\1\u011a\22\6\14\0\22\6\1\0\2\6"+
    "\1\0\1\6\1\343\25\6\14\0\22\6\1\0\2\6"+
    "\1\0\1\u011b\26\6\14\0\22\6\1\0\1\u011c\1\6"+
    "\1\0\27\6\14\0\15\6\1\u011d\4\6\1\0\2\6"+
    "\1\0\27\6\14\0\22\6\1\0\2\6\1\0\12\6"+
    "\1\146\14\6\14\0\22\6\1\0\2\6\1\0\7\6"+
    "\1\u011e\17\6\14\0\22\6\1\0\2\6\1\0\3\6"+
    "\1\u011f\23\6\14\0\22\6\1\0\2\6\1\0\1\u0120"+
    "\26\6\14\0\22\6\1\0\2\6\1\0\1\u0121\26\6"+
    "\14\0\15\6\1\u010f\4\6\1\0\2\6\1\0\27\6"+
    "\14\0\22\6\1\0\1\u0122\1\6\1\0\27\6\14\0"+
    "\15\6\1\327\4\6\1\0\2\6\1\0\27\6\14\0"+
    "\22\6\1\0\1\u0123\1\6\1\0\27\6\14\0\22\6"+
    "\1\0\2\6\1\0\3\6\1\u0124\23\6\14\0\13\6"+
    "\1\u0125\6\6\1\0\2\6\1\0\27\6\14\0\22\6"+
    "\1\0\2\6\1\0\7\6\1\327\17\6\14\0\22\6"+
    "\1\0\1\u0126\1\6\1\0\27\6\14\0\22\6\1\0"+
    "\2\6\1\0\4\6\1\u0113\22\6\14\0\22\6\1\0"+
    "\2\6\1\0\3\6\1\245\23\6\14\0\22\6\1\0"+
    "\2\6\1\0\15\6\1\u0127\11\6\14\0\22\6\1\0"+
    "\1\u0128\1\6\1\0\27\6\14\0\22\6\1\0\1\u0129"+
    "\1\6\1\0\10\6\1\154\16\6\14\0\22\6\1\0"+
    "\2\6\1\0\2\6\1\146\24\6\14\0\13\6\1\u011c"+
    "\6\6\1\0\2\6\1\0\27\6\14\0\22\6\1\0"+
    "\2\6\1\0\7\6\1\u012a\17\6\14\0\22\6\1\0"+
    "\2\6\1\0\5\6\1\u012b\21\6\14\0\22\6\1\0"+
    "\2\6\1\0\5\6\1\u012c\21\6\14\0\22\6\1\0"+
    "\1\u012d\1\6\1\0\27\6\14\0\22\6\1\0\2\6"+
    "\1\0\3\6\1\u012e\23\6\14\0\22\6\1\0\1\154"+
    "\1\6\1\0\27\6\14\0\22\6\1\0\1\u012f\1\6"+
    "\1\0\27\6\14\0\22\6\1\0\2\6\1\0\10\6"+
    "\1\146\16\6\14\0\15\6\1\u0130\4\6\1\0\2\6"+
    "\1\0\27\6\14\0\22\6\1\0\1\u0131\1\6\1\0"+
    "\27\6\14\0\22\6\1\0\1\250\1\6\1\0\27\6"+
    "\14\0\22\6\1\0\2\6\1\0\14\6\1\u0132\12\6"+
    "\14\0\22\6\1\0\1\u0133\1\6\1\0\27\6\14\0"+
    "\22\6\1\0\2\6\1\0\7\6\1\u0134\17\6\14\0"+
    "\22\6\1\0\2\6\1\0\4\6\1\u0135\22\6\14\0"+
    "\22\6\1\0\2\6\1\0\1\265\26\6\14\0\15\6"+
    "\1\u0136\4\6\1\0\2\6\1\0\27\6\14\0\22\6"+
    "\1\0\2\6\1\0\16\6\1\u0137\10\6\14\0\22\6"+
    "\1\0\2\6\1\0\3\6\1\u0138\11\6\1\u0139\11\6"+
    "\14\0\13\6\1\244\6\6\1\0\2\6\1\0\27\6"+
    "\14\0\22\6\1\0\2\6\1\0\3\6\1\u013a\23\6"+
    "\14\0\22\6\1\0\2\6\1\0\1\u013b\26\6\14\0"+
    "\15\6\1\244\4\6\1\0\2\6\1\0\27\6\101\0"+
    "\1\45\40\0\1\u013c\56\0\1\350\70\0\1\u013d\64\0"+
    "\1\u013d\107\0\1\u013e\65\0\1\350\52\0\1\u013f\111\0"+
    "\1\u0140\66\0\1\u0141\34\0\22\6\1\0\1\u0142\1\6"+
    "\1\0\27\6\14\0\22\6\1\0\2\6\1\0\5\6"+
    "\1\u0143\21\6\14\0\22\6\1\0\2\6\1\0\1\u0144"+
    "\13\6\1\234\12\6\14\0\22\6\1\0\2\6\1\0"+
    "\1\u0145\26\6\14\0\22\6\1\0\2\6\1\0\2\6"+
    "\1\u0146\24\6\14\0\22\6\1\0\2\6\1\0\4\6"+
    "\1\u0147\22\6\14\0\10\6\1\u0148\4\6\1\u0149\4\6"+
    "\1\0\2\6\1\0\27\6\14\0\10\6\1\u014a\11\6"+
    "\1\0\2\6\1\0\27\6\14\0\22\6\1\0\2\6"+
    "\1\0\5\6\1\u014b\21\6\14\0\22\6\1\0\2\6"+
    "\1\0\2\6\1\u014c\7\6\1\146\14\6\14\0\22\6"+
    "\1\0\2\6\1\0\2\6\1\327\24\6\14\0\6\6"+
    "\1\146\13\6\1\0\2\6\1\0\27\6\14\0\22\6"+
    "\1\0\2\6\1\0\15\6\1\u014d\11\6\14\0\22\6"+
    "\1\0\2\6\1\0\1\300\26\6\14\0\21\6\1\u014e"+
    "\1\0\2\6\1\0\27\6\14\0\22\6\1\0\2\6"+
    "\1\0\7\6\1\u014f\17\6\14\0\22\6\1\0\2\6"+
    "\1\0\11\6\1\u0150\15\6\14\0\22\6\1\0\2\6"+
    "\1\0\5\6\1\124\21\6\14\0\1\6\1\u0151\20\6"+
    "\1\0\2\6\1\0\27\6\14\0\22\6\1\0\1\u0152"+
    "\1\6\1\0\27\6\14\0\15\6\1\317\4\6\1\0"+
    "\2\6\1\0\3\6\1\u0153\23\6\14\0\22\6\1\0"+
    "\2\6\1\0\6\6\1\231\1\6\1\u0154\16\6\14\0"+
    "\15\6\1\u0155\4\6\1\0\2\6\1\0\27\6\14\0"+
    "\22\6\1\0\2\6\1\0\24\6\1\u0156\2\6\14\0"+
    "\22\6\1\0\2\6\1\0\25\6\1\146\1\6\14\0"+
    "\22\6\1\0\2\6\1\0\10\6\1\u0121\16\6\14\0"+
    "\22\6\1\0\2\6\1\0\10\6\1\u0157\16\6\14\0"+
    "\22\6\1\0\2\6\1\0\7\6\1\146\17\6\14\0"+
    "\22\6\1\0\2\6\1\0\4\6\1\u0158\22\6\14\0"+
    "\22\6\1\0\2\6\1\0\14\6\1\u0159\12\6\14\0"+
    "\22\6\1\0\2\6\1\0\14\6\1\146\12\6\14\0"+
    "\22\6\1\0\2\6\1\0\3\6\1\u0150\23\6\14\0"+
    "\22\6\1\0\2\6\1\0\5\6\1\u015a\21\6\14\0"+
    "\22\6\1\0\2\6\1\0\6\6\1\146\20\6\14\0"+
    "\22\6\1\0\2\6\1\0\6\6\1\304\20\6\14\0"+
    "\22\6\1\0\2\6\1\0\4\6\1\u015b\22\6\14\0"+
    "\22\6\1\0\2\6\1\0\3\6\1\u010f\23\6\14\0"+
    "\22\6\1\0\2\6\1\0\7\6\1\u015c\17\6\14\0"+
    "\15\6\1\u015d\4\6\1\0\2\6\1\0\27\6\14\0"+
    "\6\6\1\u015e\13\6\1\0\2\6\1\0\27\6\14\0"+
    "\22\6\1\0\2\6\1\0\12\6\1\u015e\14\6\14\0"+
    "\22\6\1\0\2\6\1\0\3\6\1\244\2\6\1\u0137"+
    "\20\6\14\0\13\6\1\u015f\6\6\1\0\2\6\1\0"+
    "\27\6\14\0\22\6\1\0\1\u0160\1\6\1\0\27\6"+
    "\14\0\22\6\1\0\2\6\1\0\12\6\1\u0161\14\6"+
    "\14\0\22\6\1\0\2\6\1\0\4\6\1\u0109\22\6"+
    "\14\0\22\6\1\0\2\6\1\0\5\6\1\u0162\21\6"+
    "\14\0\22\6\1\0\2\6\1\0\3\6\1\146\23\6"+
    "\14\0\22\6\1\0\2\6\1\0\4\6\1\u0163\22\6"+
    "\14\0\22\6\1\0\2\6\1\0\11\6\1\146\15\6"+
    "\14\0\22\6\1\0\2\6\1\0\13\6\1\146\13\6"+
    "\14\0\10\6\1\u0164\11\6\1\0\2\6\1\0\27\6"+
    "\14\0\10\6\1\u0165\11\6\1\0\2\6\1\0\27\6"+
    "\14\0\22\6\1\0\2\6\1\0\5\6\1\u0166\21\6"+
    "\14\0\10\6\1\u011e\11\6\1\0\2\6\1\0\27\6"+
    "\14\0\22\6\1\0\2\6\1\0\10\6\1\u0167\16\6"+
    "\14\0\15\6\1\u0137\4\6\1\0\2\6\1\0\27\6"+
    "\14\0\21\6\1\u0168\1\0\2\6\1\0\5\6\1\250"+
    "\1\6\1\u0169\17\6\14\0\22\6\1\0\2\6\1\0"+
    "\1\250\26\6\14\0\22\6\1\0\2\6\1\0\3\6"+
    "\1\u016a\23\6\14\0\22\6\1\0\2\6\1\0\2\6"+
    "\1\u016b\24\6\14\0\22\6\1\0\2\6\1\0\7\6"+
    "\1\244\17\6\14\0\22\6\1\0\2\6\1\0\4\6"+
    "\1\u016c\22\6\14\0\22\6\1\0\2\6\1\0\10\6"+
    "\1\u016d\16\6\14\0\22\6\1\0\2\6\1\0\4\6"+
    "\1\u0136\22\6\14\0\22\6\1\0\2\6\1\0\15\6"+
    "\1\u016e\11\6\14\0\22\6\1\0\2\6\1\0\2\6"+
    "\1\u016f\24\6\14\0\22\6\1\0\2\6\1\0\4\6"+
    "\1\u0170\22\6\14\0\22\6\1\0\2\6\1\0\3\6"+
    "\1\314\23\6\14\0\15\6\1\317\4\6\1\0\2\6"+
    "\1\0\27\6\14\0\22\6\1\0\2\6\1\0\1\u0171"+
    "\26\6\14\0\22\6\1\0\2\6\1\0\5\6\1\231"+
    "\21\6\14\0\22\6\1\0\2\6\1\0\1\u0172\26\6"+
    "\14\0\22\6\1\0\1\u0173\1\6\1\0\27\6\14\0"+
    "\22\6\1\0\1\u0174\1\6\1\0\27\6\14\0\13\6"+
    "\1\u015b\6\6\1\0\2\6\1\0\27\6\14\0\22\6"+
    "\1\0\2\6\1\0\3\6\1\166\23\6\50\0\1\u013d"+
    "\66\0\1\u013d\51\0\1\u0175\107\0\1\u0176\76\0\1\u0177"+
    "\30\0\10\6\1\u0178\11\6\1\0\2\6\1\0\27\6"+
    "\14\0\21\6\1\u0126\1\0\2\6\1\0\27\6\14\0"+
    "\15\6\1\252\4\6\1\0\2\6\1\0\27\6\14\0"+
    "\22\6\1\0\2\6\1\0\16\6\1\244\10\6\14\0"+
    "\22\6\1\0\2\6\1\0\3\6\1\u014e\23\6\14\0"+
    "\10\6\1\u0179\11\6\1\0\2\6\1\0\27\6\14\0"+
    "\15\6\1\u017a\4\6\1\0\2\6\1\0\27\6\14\0"+
    "\22\6\1\0\1\u017b\1\6\1\0\27\6\14\0\22\6"+
    "\1\0\1\u017c\1\6\1\0\27\6\14\0\22\6\1\0"+
    "\2\6\1\0\6\6\1\u017d\20\6\14\0\13\6\1\u017e"+
    "\6\6\1\0\2\6\1\0\27\6\14\0\22\6\1\0"+
    "\1\116\1\6\1\0\27\6\14\0\10\6\1\u017f\11\6"+
    "\1\0\2\6\1\0\27\6\14\0\22\6\1\0\2\6"+
    "\1\0\6\6\1\u0180\20\6\14\0\1\6\1\u0123\20\6"+
    "\1\0\2\6\1\0\27\6\14\0\22\6\1\0\1\u0181"+
    "\1\6\1\0\7\6\1\u0182\17\6\14\0\22\6\1\0"+
    "\2\6\1\0\7\6\1\u0183\17\6\14\0\22\6\1\0"+
    "\1\u0184\1\6\1\0\20\6\1\146\1\u0185\1\u0106\1\u0186"+
    "\3\6\14\0\22\6\1\0\2\6\1\0\15\6\1\146"+
    "\11\6\14\0\22\6\1\0\2\6\1\0\3\6\1\u0187"+
    "\23\6\14\0\22\6\1\0\2\6\1\0\20\6\1\u0188"+
    "\6\6\14\0\22\6\1\0\2\6\1\0\15\6\1\u0139"+
    "\11\6\14\0\22\6\1\0\2\6\1\0\3\6\1\u0189"+
    "\23\6\14\0\22\6\1\0\2\6\1\0\1\u018a\26\6"+
    "\14\0\22\6\1\0\2\6\1\0\7\6\1\340\17\6"+
    "\14\0\22\6\1\0\2\6\1\0\1\u0178\26\6\14\0"+
    "\21\6\1\u018b\1\0\2\6\1\0\27\6\14\0\15\6"+
    "\1\u0120\4\6\1\0\2\6\1\0\27\6\14\0\22\6"+
    "\1\0\2\6\1\0\15\6\1\u018c\11\6\14\0\15\6"+
    "\1\u011e\4\6\1\0\2\6\1\0\27\6\14\0\10\6"+
    "\1\u018d\11\6\1\0\2\6\1\0\27\6\14\0\22\6"+
    "\1\0\2\6\1\0\5\6\1\u018e\21\6\14\0\10\6"+
    "\1\u018f\11\6\1\0\2\6\1\0\27\6\14\0\22\6"+
    "\1\0\2\6\1\0\1\u0125\26\6\14\0\22\6\1\0"+
    "\2\6\1\0\3\6\1\u0190\23\6\14\0\22\6\1\0"+
    "\2\6\1\0\1\u0191\26\6\14\0\10\6\1\u0150\11\6"+
    "\1\0\2\6\1\0\27\6\14\0\17\6\1\146\2\6"+
    "\1\0\2\6\1\0\27\6\14\0\22\6\1\0\1\u0167"+
    "\1\6\1\0\27\6\14\0\22\6\1\0\2\6\1\0"+
    "\1\u017e\26\6\14\0\22\6\1\0\1\u0192\1\6\1\0"+
    "\27\6\14\0\22\6\1\0\2\6\1\0\3\6\1\u014d"+
    "\23\6\14\0\17\6\1\u0193\2\6\1\0\2\6\1\0"+
    "\5\6\1\u0194\21\6\14\0\22\6\1\0\2\6\1\0"+
    "\7\6\1\u015d\17\6\14\0\22\6\1\0\2\6\1\0"+
    "\3\6\1\116\23\6\14\0\22\6\1\0\2\6\1\0"+
    "\15\6\1\u0193\11\6\14\0\22\6\1\0\2\6\1\0"+
    "\10\6\1\154\16\6\14\0\22\6\1\0\2\6\1\0"+
    "\3\6\1\u0195\23\6\14\0\22\6\1\0\2\6\1\0"+
    "\3\6\1\244\23\6\14\0\10\6\1\u0196\11\6\1\0"+
    "\2\6\1\0\27\6\14\0\22\6\1\0\2\6\1\0"+
    "\4\6\1\u0197\22\6\35\0\1\347\100\0\1\u013d\65\0"+
    "\1\u013d\42\0\15\6\1\146\4\6\1\0\2\6\1\0"+
    "\27\6\14\0\22\6\1\0\1\u0198\1\6\1\0\27\6"+
    "\14\0\22\6\1\0\2\6\1\0\2\6\1\u0199\24\6"+
    "\14\0\22\6\1\0\2\6\1\0\6\6\1\u0137\20\6"+
    "\14\0\22\6\1\0\2\6\1\0\15\6\1\u011e\11\6"+
    "\14\0\22\6\1\0\2\6\1\0\7\6\1\u0126\17\6"+
    "\14\0\22\6\1\0\2\6\1\0\12\6\1\244\14\6"+
    "\14\0\22\6\1\0\2\6\1\0\1\u019a\26\6\14\0"+
    "\15\6\1\u019b\4\6\1\0\2\6\1\0\27\6\14\0"+
    "\6\6\1\u019c\13\6\1\0\2\6\1\0\27\6\14\0"+
    "\22\6\1\0\2\6\1\0\10\6\1\u019d\16\6\14\0"+
    "\22\6\1\0\2\6\1\0\3\6\1\u019e\23\6\14\0"+
    "\22\6\1\0\2\6\1\0\4\6\1\u019f\22\6\14\0"+
    "\22\6\1\0\2\6\1\0\22\6\1\146\4\6\14\0"+
    "\22\6\1\0\2\6\1\0\24\6\1\146\2\6\14\0"+
    "\22\6\1\0\2\6\1\0\5\6\1\u01a0\21\6\14\0"+
    "\21\6\1\146\1\0\2\6\1\0\5\6\1\146\21\6"+
    "\14\0\13\6\1\u01a1\6\6\1\0\2\6\1\0\27\6"+
    "\14\0\22\6\1\0\2\6\1\0\4\6\1\u01a2\22\6"+
    "\14\0\1\6\1\u01a3\20\6\1\0\2\6\1\0\27\6"+
    "\14\0\22\6\1\0\2\6\1\0\10\6\1\u01a4\16\6"+
    "\14\0\22\6\1\0\2\6\1\0\1\u0196\26\6\14\0"+
    "\10\6\1\u01a5\11\6\1\0\2\6\1\0\27\6\14\0"+
    "\22\6\1\0\2\6\1\0\5\6\1\u011e\21\6\14\0"+
    "\22\6\1\0\2\6\1\0\1\u01a6\26\6\14\0\22\6"+
    "\1\0\2\6\1\0\2\6\1\u011e\24\6\14\0\22\6"+
    "\1\0\2\6\1\0\4\6\1\u01a7\22\6\14\0\22\6"+
    "\1\0\2\6\1\0\1\u01a8\26\6\14\0\22\6\1\0"+
    "\2\6\1\0\10\6\1\u01a9\16\6\14\0\22\6\1\0"+
    "\2\6\1\0\10\6\1\116\16\6\14\0\22\6\1\0"+
    "\2\6\1\0\3\6\1\327\23\6\14\0\22\6\1\0"+
    "\2\6\1\0\3\6\1\u0120\23\6\14\0\22\6\1\0"+
    "\2\6\1\0\5\6\1\332\21\6\14\0\22\6\1\0"+
    "\2\6\1\0\15\6\1\u01aa\11\6\14\0\15\6\1\u0178"+
    "\4\6\1\0\2\6\1\0\27\6\14\0\22\6\1\0"+
    "\1\u01ab\1\6\1\0\27\6\14\0\22\6\1\0\2\6"+
    "\1\0\5\6\1\u01ac\21\6\14\0\22\6\1\0\2\6"+
    "\1\0\3\6\1\u01ad\23\6\14\0\22\6\1\0\2\6"+
    "\1\0\5\6\1\u01ae\21\6\14\0\17\6\1\u0193\2\6"+
    "\1\0\2\6\1\0\27\6\14\0\22\6\1\0\2\6"+
    "\1\0\15\6\1\u0180\11\6\14\0\22\6\1\0\2\6"+
    "\1\0\1\u01af\26\6\14\0\1\6\1\u01b0\20\6\1\0"+
    "\2\6\1\0\27\6\14\0\22\6\1\0\2\6\1\0"+
    "\1\313\26\6\14\0\22\6\1\0\2\6\1\0\4\6"+
    "\1\u011e\22\6\14\0\22\6\1\0\2\6\1\0\7\6"+
    "\1\u0120\17\6\14\0\22\6\1\0\2\6\1\0\15\6"+
    "\1\u01b1\11\6\14\0\10\6\1\244\11\6\1\0\2\6"+
    "\1\0\27\6\14\0\22\6\1\0\2\6\1\0\4\6"+
    "\1\u01b2\22\6\14\0\22\6\1\0\1\231\1\6\1\0"+
    "\27\6\14\0\1\6\1\u01b3\20\6\1\0\2\6\1\0"+
    "\27\6\14\0\22\6\1\0\2\6\1\0\2\6\1\u01b4"+
    "\24\6\14\0\1\6\1\u01b5\20\6\1\0\2\6\1\0"+
    "\27\6\14\0\17\6\1\u01b6\2\6\1\0\2\6\1\0"+
    "\27\6\14\0\15\6\1\u01ab\4\6\1\0\2\6\1\0"+
    "\27\6\14\0\22\6\1\0\2\6\1\0\3\6\1\u01b7"+
    "\23\6\14\0\22\6\1\0\2\6\1\0\4\6\1\u01b8"+
    "\22\6\14\0\1\6\1\u0130\20\6\1\0\2\6\1\0"+
    "\27\6\14\0\22\6\1\0\2\6\1\0\5\6\1\u01b9"+
    "\21\6\14\0\22\6\1\0\2\6\1\0\3\6\1\313"+
    "\23\6\14\0\22\6\1\0\1\u0181\1\6\1\0\27\6"+
    "\14\0\22\6\1\0\2\6\1\0\5\6\1\u014d\21\6"+
    "\14\0\22\6\1\0\2\6\1\0\27\6\1\u01ba\13\0"+
    "\22\6\1\0\1\u01bb\1\6\1\0\27\6\14\0\22\6"+
    "\1\0\2\6\1\0\7\6\1\u01bc\17\6\14\0\22\6"+
    "\1\0\2\6\1\0\3\6\1\u01a5\23\6\14\0\22\6"+
    "\1\0\2\6\1\0\14\6\1\u01bd\12\6\14\0\22\6"+
    "\1\0\1\u01be\1\6\1\0\27\6\14\0\22\6\1\0"+
    "\2\6\1\0\4\6\1\u01bf\22\6\14\0\22\6\1\0"+
    "\2\6\1\0\5\6\1\u01c0\21\6\14\0\22\6\1\0"+
    "\2\6\1\0\3\6\1\u01c1\23\6\14\0\22\6\1\0"+
    "\2\6\1\0\1\u01c2\26\6\14\0\22\6\1\0\2\6"+
    "\1\0\7\6\1\u01a8\17\6\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24681];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\15\1\1\11\15\1\1\11\4\1\1\11"+
    "\1\1\1\11\3\1\6\0\6\1\1\11\2\1\1\0"+
    "\74\1\4\0\1\1\3\0\2\11\1\1\7\0\1\1"+
    "\3\0\24\1\1\0\103\1\11\0\116\1\1\0\1\11"+
    "\4\0\63\1\3\0\102\1\1\11\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	/* styles */
	
	public static final byte PLAIN_STYLE = 1;
	public static final byte KEYWORD_STYLE = 2;
	public static final byte TYPE_STYLE = 3;
	public static final byte OPERATOR_STYLE = 4;
	public static final byte SEPARATOR_STYLE = 5;
	public static final byte LITERAL_STYLE = 6;
	public static final byte CPP_COMMENT_STYLE = 7;
	public static final byte DOXYGEN_COMMENT_STYLE = 8;
	public static final byte DOXYGEN_TAG_STYLE = 9;
	public static final byte PREPROC_STYLE = 10;
	
	/* Highlighter implementation */
	
	public int getStyleCount()
	{
		return 10;
	}
	
	public byte getStartState()
	{
		return YYINITIAL+1;
	}
	
	public byte getCurrentState()
	{
		return (byte) (yystate()+1);
	}
	
	public void setState(byte newState)
	{
		yybegin(newState-1);
	}
	
	public byte getNextToken()
	throws IOException
	{
		return (byte) yylex();
	}
	
	public int getTokenLength()
	{
		return yylength();
	}
	
	public void setReader(Reader r)
	{
		this.zzReader = r;
	}

	public CppHighlighter()
	{
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CppHighlighter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CppHighlighter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1796) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { return DOXYGEN_TAG_STYLE;
          }
        case 15: break;
        case 6: 
          { return DOXYGEN_COMMENT_STYLE;
          }
        case 16: break;
        case 1: 
          { return PLAIN_STYLE;
          }
        case 17: break;
        case 8: 
          { return KEYWORD_STYLE;
          }
        case 18: break;
        case 14: 
          { yybegin(IN_DOXYGEN_COMMENT); return DOXYGEN_COMMENT_STYLE;
          }
        case 19: break;
        case 4: 
          { return OPERATOR_STYLE;
          }
        case 20: break;
        case 2: 
          { return LITERAL_STYLE;
          }
        case 21: break;
        case 3: 
          { return SEPARATOR_STYLE;
          }
        case 22: break;
        case 7: 
          { return TYPE_STYLE;
          }
        case 23: break;
        case 5: 
          { return CPP_COMMENT_STYLE;
          }
        case 24: break;
        case 11: 
          { yybegin(YYINITIAL); return DOXYGEN_COMMENT_STYLE;
          }
        case 25: break;
        case 9: 
          { yybegin(IN_COMMENT);  return CPP_COMMENT_STYLE;
          }
        case 26: break;
        case 10: 
          { yybegin(YYINITIAL); return CPP_COMMENT_STYLE;
          }
        case 27: break;
        case 13: 
          { return PREPROC_STYLE;
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
